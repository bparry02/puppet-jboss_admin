# Autogenerated from a Treetop grammar. Edits may be lost.


module CliCondition
  include Treetop::Runtime

  def root
    @root ||= :statement
  end

  include CliCommand

  module Statement0
    def logical_expression
      elements[0]
    end

    def space1
      elements[1]
    end

    def space2
      elements[3]
    end

    def command
      elements[4]
    end
  end

  module Statement1
    def value
      [logical_expression.value, command.value]
    end
  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        node_cache[:statement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_logical_expression
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        if (match_len = has_terminal?('of', false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('of')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            r5 = _nt_command
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Statement0)
      r0.extend(Statement1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module LogicalExpression0
    def expr
      elements[0]
    end
  end

  module LogicalExpression1
    def expr
      elements[2]
    end

  end

  module LogicalExpression2
    def space1
      elements[0]
    end

    def logical_operator
      elements[1]
    end

    def space2
      elements[2]
    end

    def logical_expression
      elements[3]
    end
  end

  module LogicalExpression3
    def head
      elements[0]
    end

    def tail
      elements[1]
    end
  end

  module LogicalExpression4
    def value
      head_expr = head.expr.value
      tail.elements.inject(head_expr) do |result, node| 
        node.logical_operator.value result, node.logical_expression.value
      end
    end
  end

  def _nt_logical_expression
    start_index = index
    if node_cache[:logical_expression].has_key?(index)
      cached = node_cache[:logical_expression][index]
      if cached
        node_cache[:logical_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2, s2 = index, []
    r3 = _nt_comparison_expression
    s2 << r3
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(LogicalExpression0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      i4, s4 = index, []
      if (match_len = has_terminal?('(', false, index))
        r5 = true
        @index += match_len
      else
        terminal_parse_failure('(')
        r5 = nil
      end
      s4 << r5
      if r5
        r7 = _nt_space
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r6
        if r6
          r8 = _nt_logical_expression
          s4 << r8
          if r8
            r10 = _nt_space
            if r10
              r9 = r10
            else
              r9 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r9
            if r9
              if (match_len = has_terminal?(')', false, index))
                r11 = true
                @index += match_len
              else
                terminal_parse_failure(')')
                r11 = nil
              end
              s4 << r11
            end
          end
        end
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(LogicalExpression1)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
        r1 = r4
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      s12, i12 = [], index
      loop do
        i13, s13 = index, []
        r14 = _nt_space
        s13 << r14
        if r14
          r15 = _nt_logical_operator
          s13 << r15
          if r15
            r16 = _nt_space
            s13 << r16
            if r16
              r17 = _nt_logical_expression
              s13 << r17
            end
          end
        end
        if s13.last
          r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
          r13.extend(LogicalExpression2)
        else
          @index = i13
          r13 = nil
        end
        if r13
          s12 << r13
        else
          break
        end
      end
      r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
      s0 << r12
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LogicalExpression3)
      r0.extend(LogicalExpression4)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:logical_expression][start_index] = r0

    r0
  end

  module ComparisonExpression0
    def accessor
      elements[0]
    end

    def comparison_operator
      elements[2]
    end

    def rhs
      elements[4]
    end
  end

  module ComparisonExpression1
    def value
      lambda { |hash| 
        lhs = accessor.text_value.split('.').inject(hash) {|result, key| (result || {})[key]} 
        comparison_operator.compare lhs, rhs.value
      }
    end
  end

  def _nt_comparison_expression
    start_index = index
    if node_cache[:comparison_expression].has_key?(index)
      cached = node_cache[:comparison_expression][index]
      if cached
        node_cache[:comparison_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_accessor
    s0 << r1
    if r1
      r3 = _nt_space
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_comparison_operator
        s0 << r4
        if r4
          r6 = _nt_space
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            r7 = _nt_value
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ComparisonExpression0)
      r0.extend(ComparisonExpression1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comparison_expression][start_index] = r0

    r0
  end

  module Accessor0
  end

  module Accessor1
  end

  def _nt_accessor
    start_index = index
    if node_cache[:accessor].has_key?(index)
      cached = node_cache[:accessor][index]
      if cached
        node_cache[:accessor][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[a-zA-Z-]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z-]')
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if (match_len = has_terminal?('.', false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure('.')
          r5 = nil
        end
        s4 << r5
        if r5
          s6, i6 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[a-zA-Z-]'] ||= Regexp.new(gr), :regexp, index)
              r7 = true
              @index += 1
            else
              terminal_parse_failure('[a-zA-Z-]')
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          if s6.empty?
            @index = i6
            r6 = nil
          else
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          end
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Accessor0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Accessor1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:accessor][start_index] = r0

    r0
  end

  module ComparisonOperator0
    def compare(lhs, rhs)
      lhs.to_s <= rhs.to_s
    end
  end

  module ComparisonOperator1
    def compare(lhs, rhs)
      lhs.to_s >= rhs.to_s
    end
  end

  module ComparisonOperator2
    def compare(lhs, rhs)
      lhs.to_s > rhs.to_s
    end
  end

  module ComparisonOperator3
    def compare(lhs, rhs)
      lhs.to_s < rhs.to_s
    end
  end

  module ComparisonOperator4
    def compare(lhs, rhs)
      lhs.to_s == rhs.to_s
    end
  end

  module ComparisonOperator5
    def compare(lhs, rhs)
      lhs.to_s != rhs.to_s
    end
  end

  def _nt_comparison_operator
    start_index = index
    if node_cache[:comparison_operator].has_key?(index)
      cached = node_cache[:comparison_operator][index]
      if cached
        node_cache[:comparison_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('<=', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      r1.extend(ComparisonOperator0)
      @index += match_len
    else
      terminal_parse_failure('<=')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('>=', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        r2.extend(ComparisonOperator1)
        @index += match_len
      else
        terminal_parse_failure('>=')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?('>', false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          r3.extend(ComparisonOperator2)
          @index += match_len
        else
          terminal_parse_failure('>')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          if (match_len = has_terminal?('<', false, index))
            r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            r4.extend(ComparisonOperator3)
            @index += match_len
          else
            terminal_parse_failure('<')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            if (match_len = has_terminal?('==', false, index))
              r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              r5.extend(ComparisonOperator4)
              @index += match_len
            else
              terminal_parse_failure('==')
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              if (match_len = has_terminal?('!=', false, index))
                r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                r6.extend(ComparisonOperator5)
                @index += match_len
              else
                terminal_parse_failure('!=')
                r6 = nil
              end
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r0 = r6
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:comparison_operator][start_index] = r0

    r0
  end

  module LogicalOperator0
    def value(left, right)
      lambda {|hash| left.call(hash) && right.call(hash)}
    end
  end

  module LogicalOperator1
    def value(left, right)
      lambda {|hash| left.call(hash) || right.call(hash)}
    end
  end

  def _nt_logical_operator
    start_index = index
    if node_cache[:logical_operator].has_key?(index)
      cached = node_cache[:logical_operator][index]
      if cached
        node_cache[:logical_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('&&', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      r1.extend(LogicalOperator0)
      @index += match_len
    else
      terminal_parse_failure('&&')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('||', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        r2.extend(LogicalOperator1)
        @index += match_len
      else
        terminal_parse_failure('||')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:logical_operator][start_index] = r0

    r0
  end

  module Value0
  end

  module Value1
    def value
      text_value.gsub(/^\"|\"?$/, '')
    end
  end

  def _nt_value
    start_index = index
    if node_cache[:value].has_key?(index)
      cached = node_cache[:value][index]
      if cached
        node_cache[:value][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    s1, i1 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9-]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z0-9-]')
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
      r0.extend(Value1)
    else
      i3, s3 = index, []
      if (match_len = has_terminal?('"', false, index))
        r4 = true
        @index += match_len
      else
        terminal_parse_failure('"')
        r4 = nil
      end
      s3 << r4
      if r4
        s5, i5 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_\\.\\-:/]'] ||= Regexp.new(gr), :regexp, index)
            r6 = true
            @index += 1
          else
            terminal_parse_failure('[a-zA-Z0-9_\\.\\-:/]')
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        if s5.empty?
          @index = i5
          r5 = nil
        else
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        end
        s3 << r5
        if r5
          if (match_len = has_terminal?('"', false, index))
            r7 = true
            @index += match_len
          else
            terminal_parse_failure('"')
            r7 = nil
          end
          s3 << r7
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Value0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r0 = r3
        r0.extend(Value1)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:value][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[ ]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[ ]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

end

class CliConditionParser < Treetop::Runtime::CompiledParser
  include CliCondition
end

